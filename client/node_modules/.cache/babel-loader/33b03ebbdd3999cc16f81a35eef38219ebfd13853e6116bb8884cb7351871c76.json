{"ast":null,"code":"import _slicedToArray from\"/Users/moritzsalla/Documents/GitHub/socketio-fiber-starter/client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import{useEffect,useState}from'react';var DEFAULT_DEBOUNCE_TIME=300;/**\n * @hook useDebounce\n * @source https://usehooks.com/useDebounce/\n * @param {*} value\n * @param {Number} [delay]\n * @returns {*} debounced value\n */export var useDebounce=function useDebounce(value){var delay=arguments.length>1&&arguments[1]!==undefined?arguments[1]:DEFAULT_DEBOUNCE_TIME;// State and setters for debounced value\nvar _useState=useState(value),_useState2=_slicedToArray(_useState,2),debouncedValue=_useState2[0],setDebouncedValue=_useState2[1];useEffect(function(){// Update debounced value after delay\nvar handler=setTimeout(function(){setDebouncedValue(value);},delay);// Cancel the timeout if value changes (also on delay change or unmount)\n// This is how we prevent debounced value from updating if value is changed ...\n// .. within the delay period. Timeout gets cleared and restarted.\nreturn function(){clearTimeout(handler);};},[value,delay]// Only re-call effect if value or delay changes\n);return debouncedValue;};","map":{"version":3,"names":["useEffect","useState","DEFAULT_DEBOUNCE_TIME","useDebounce","value","delay","debouncedValue","setDebouncedValue","handler","setTimeout","clearTimeout"],"sources":["/Users/moritzsalla/Documents/GitHub/socketio-fiber-starter/client/src/hooks/useDebounce.js"],"sourcesContent":["import { useEffect, useState } from 'react';\n\nconst DEFAULT_DEBOUNCE_TIME = 300;\n\n/**\n * @hook useDebounce\n * @source https://usehooks.com/useDebounce/\n * @param {*} value\n * @param {Number} [delay]\n * @returns {*} debounced value\n */\nexport const useDebounce = (value, delay = DEFAULT_DEBOUNCE_TIME) => {\n  // State and setters for debounced value\n  const [debouncedValue, setDebouncedValue] = useState(value);\n\n  useEffect(\n    () => {\n      // Update debounced value after delay\n      const handler = setTimeout(() => {\n        setDebouncedValue(value);\n      }, delay);\n\n      // Cancel the timeout if value changes (also on delay change or unmount)\n      // This is how we prevent debounced value from updating if value is changed ...\n      // .. within the delay period. Timeout gets cleared and restarted.\n      return () => {\n        clearTimeout(handler);\n      };\n    },\n    [value, delay] // Only re-call effect if value or delay changes\n  );\n\n  return debouncedValue;\n};\n"],"mappings":"uJAAA,OAASA,SAAS,CAAEC,QAAQ,KAAQ,OAAO,CAE3C,GAAMC,sBAAqB,CAAG,GAAG,CAEjC;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,IAAMC,YAAW,CAAG,QAAdA,YAAW,CAAIC,KAAK,CAAoC,IAAlCC,MAAK,2DAAGH,qBAAqB,CAC9D;AACA,cAA4CD,QAAQ,CAACG,KAAK,CAAC,wCAApDE,cAAc,eAAEC,iBAAiB,eAExCP,SAAS,CACP,UAAM,CACJ;AACA,GAAMQ,QAAO,CAAGC,UAAU,CAAC,UAAM,CAC/BF,iBAAiB,CAACH,KAAK,CAAC,CAC1B,CAAC,CAAEC,KAAK,CAAC,CAET;AACA;AACA;AACA,MAAO,WAAM,CACXK,YAAY,CAACF,OAAO,CAAC,CACvB,CAAC,CACH,CAAC,CACD,CAACJ,KAAK,CAAEC,KAAK,CAAE;AAAA,CAChB,CAED,MAAOC,eAAc,CACvB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}